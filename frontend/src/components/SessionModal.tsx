import { useEffect, useState } from 'react'
import './SessionModal.css'

interface Props {
  onClose: () => void
}

type GameSession = {
  name: string
  host: string
  players: string[]
  password?: string
  maxPlayers?: number
}

function SessionModal({ onClose }: Props) {
  const [sessions, setSessions] = useState<GameSession[]>([])
  const [sessionName, setSessionName] = useState('')
  const [sessionPassword, setSessionPassword] = useState('')
  const [maxPlayers, setMaxPlayers] = useState(4)
  const username = sessionStorage.getItem('username')

  useEffect(() => {
    const data = JSON.parse(localStorage.getItem('sessions') || '[]')
    setSessions(data)
  }, [])

  const saveSessions = (updated: GameSession[]) => {
    setSessions(updated)
    localStorage.setItem('sessions', JSON.stringify(updated))
  }

  const createSession = () => {
    if (!sessionName.trim() || !username) return
    if (sessionPassword.length < 6 || sessionPassword.length > 12) {
      alert('–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 6 –¥–æ 12 —Å–∏–º–≤–æ–ª—ñ–≤.')
      return
    }

    const newSession: GameSession = {
      name: sessionName,
      host: username,
      players: [username], // —Ö–æ—Å—Ç –¥–æ–¥–∞—î—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤
      password: sessionPassword,
      maxPlayers: maxPlayers
    }

    const updated = [...sessions, newSession]
    saveSessions(updated)
    localStorage.setItem('activeSession', JSON.stringify(newSession))
    setSessionName('')
    setSessionPassword('')

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –ª–æ–±–±—ñ
    window.location.href = `/lobby/${newSession.name}`
  }

  const joinSession = (name: string) => {
    const target = sessions.find(s => s.name === name)
    if (!target || !username) return

    if (target.players.includes(username)) {
      // –≤–∂–µ –≤ –ª–æ–±–±—ñ
      localStorage.setItem('activeSession', JSON.stringify(target))
      window.location.href = `/lobby/${target.name}`
      return
    }

    const enteredPassword = prompt('–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å —Å–µ—Å—ñ—ó:')
    if (target.password && enteredPassword !== target.password) {
      alert('–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å!')
      return
    }

    if (target.players.length >= (target.maxPlayers || 4)) {
      alert('–õ–æ–±–±—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ!')
      return
    }

    const updatedSession = {
      ...target,
      players: [...target.players, username]
    }

    const all = sessions.map(s => s.name === name ? updatedSession : s)
    saveSessions(all)
    localStorage.setItem('activeSession', JSON.stringify(updatedSession))
    window.location.href = `/lobby/${updatedSession.name}`
  }

  const removeSession = (name: string) => {
    const updated = sessions.filter(s => s.name !== name)
    saveSessions(updated)
  }

  return (
    <div className="modal-overlay">
      <div className="modal">
        <h2>–°–µ—Å—ñ—ó –≥—Ä–∏</h2>

        <input
          type="text"
          placeholder="–ù–∞–∑–≤–∞ –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó"
          value={sessionName}
          onChange={(e) => setSessionName(e.target.value)}
        />
        <input
          type="password"
          placeholder="–ü–∞—Ä–æ–ª—å (6‚Äì12 —Å–∏–º–≤–æ–ª—ñ–≤)"
          value={sessionPassword}
          onChange={(e) => setSessionPassword(e.target.value)}
        />
        <select value={maxPlayers} onChange={(e) => setMaxPlayers(Number(e.target.value))}>
          {[2,3,4,5,6,7,8,9,10].map(n => (
            <option key={n} value={n}>{n} –≥—Ä–∞–≤—Ü—ñ–≤</option>
          ))}
        </select>

        <button onClick={createSession}>–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é</button>

        <h4>–ê–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó:</h4>
        {sessions.length === 0 ? (
          <p>–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Å–µ—Å—ñ–π</p>
        ) : (
          <ul>
            {sessions.map((s, i) => (
              <li key={i}>
                <strong>{s.name}</strong> (—Ö–æ—Å—Ç: {s.host}, –≥—Ä–∞–≤—Ü—ñ–≤: {s.players.length}/{s.maxPlayers || 4})
                <button onClick={() => joinSession(s.name)}>–ì—Ä–∞—Ç–∏</button>
                {s.host === username && (
                  <button onClick={() => removeSession(s.name)}>üóë –ó–∞–∫—Ä–∏—Ç–∏</button>
                )}
              </li>
            ))}
          </ul>
        )}

        <button onClick={onClose}>–ó–∞–∫—Ä–∏—Ç–∏</button>
      </div>
    </div>
  )
}

export default SessionModal
